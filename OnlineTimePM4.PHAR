<?php __HALT_COMPILER(); ?>
â                    OnlineTimePM4-main/               ¶         OnlineTimePM4-main/.poggit.yml”      ”   ºö w¶         OnlineTimePM4-main/Licenseþ     þ  <]?_¶         OnlineTimePM4-main/README.md+     +  PXïm¶         OnlineTimePM4-main/plugin.ymlÊ     Ê  (¯¤¶         OnlineTimePM4-main/src/               ¶      !   OnlineTimePM4-main/src/skyss0fly/               ¶      /   OnlineTimePM4-main/src/skyss0fly/OnlineTimePM4/               ¶      7   OnlineTimePM4-main/src/skyss0fly/OnlineTimePM4/Main.php&     &  ‡ª­¶      8   OnlineTimePM4-main/src/skyss0fly/OnlineTimePM4/database/               ¶      B   OnlineTimePM4-main/src/skyss0fly/OnlineTimePM4/database/SQLite.php       Ä‡¶      --- # Poggit-CI Manifest. Open the CI at https://poggit.pmmp.io/ci/skyss0fly/OnlineTimePM4
build-by-default: true
branches:
- main
projects: []
...
Copyright (c) 2019, Zedstar16
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Redistributions must be free, and the original author must be included
in any distribution.
* Neither the name of the Zedstar16 nor the
names of its contributors may be used to endorse or promote products
derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Zedstar16 BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# OnlineTimePM4
Online time originally created by Zedstar16. ported over to pm4
-----------
# OnlineTime
Measure how long players are spending on your server

The plugin will measure online times as soon as it is added to the server

- Get a compiled .phar version [here](https://poggit.pmmp.io/p/OnlineTime/1.2)
- Great for seeing player activity and finding the most active players on the server!
- Addon support for [ScoreHud](https://poggit.pmmp.io/p/ScoreHud), get the Addon [here](https://github.com/JackMD/ScoreHud-Addons)

# Commands:
- /ot total [player]  (Get the total online time of yourself or another player)
- /ot session [player] (Get the current session duration of yourself or another player)
- /ot top [page] (Get the list of top most active players
- /ot reset all (OPs only, reset all online time data)
- /ot info (Displays version and credits)

# TODO
- Add floating text of top online players (soon)
- Add a rewards system for top most active players (after a while)
- MySQL support
- Active online time
- daily, weekly and monthly times & top
name: OnlineTimePM4
main: skyss0fly\OnlineTimePM4\Main
version: 1.0
api: 4.5.2
load: POSTWORLD
author: skyss0fly
description: Measure time spent online
website: https://github.com/skyss0fly/OnlineTimePM4

commands:
 onlinetime:
  aliases: [ot, otime]
  description: "View how much time you've spent on the server"
  permission: onlinetime

permissions:
 reset.onlinetime:
  default: op
  description: "reset"
 onlinetime:
  default: true
  description: "ot"
<?php

declare(strict_types=1);

namespace skyss0fly\OnlineTimePM4;

use pocketmine\event\Listener;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\command\CommandSender;
use pocketmine\command\Command;
use skyss0fly\OnlineTimePM4\database\SQLite;

class Main extends PluginBase implements Listener
{
    public static $times = [];
    /** @var SQLite */
    public $db;

    public function onEnable(): void
    {
        $this->db = new SQLite($this);
        $this->getServer()->getPluginManager()->registerEvents($this, $this);
    }

    public function onJoin(PlayerJoinEvent $event)
    {
        if ($this->db->hasTime($event->getPlayer()) === false) {
            $this->db->registerTime($event->getPlayer());
        }
        $pn = strtolower($event->getPlayer()->getName());
        self::$times[$pn] = time();
    }

    public function onQuit(PlayerQuitEvent $event)
    {
        $player = strtolower($event->getPlayer()->getName());
        $p = $event->getPlayer();
        if (isset(self::$times[$player])) {
            $old = $this->db->getRawTime($p);
            $this->db->setRawTime($p, ($old + (time() - self::$times[$player])));
            unset(self::$times[$player]);
        }
    }

    public function onCommand(CommandSender $sender, Command $command, string $label, array $args): bool
    {
        if ($command->getName() == "onlinetime") {
            if (!$sender instanceof Player && !isset($args[1]) && isset($args[0]) && strtolower($args[0]) == "session") {
                $sender->sendMessage("You can only get the online time of other players, not yourself");
                return false;
            }
            $h = base64_decode("wqdkPS09LT3Cp2FPbmxpbmXCp2JUaW1lIEhlbHDCp2Q9LT0tPQrCp2Ivb3QgdG9wIFtwYWdlXSAgwqdhVmlldyB0aGUgdG9wIG1vc3QgYWN0aXZlIHBsYXllcnMKwqdiL290IHRvdGFsIFtwbGF5ZXJdICDCp2FWaWV3IGhvdyBsb25nIHlvdSBvciB0aGUgcGxheWVyIHlvdSBzZWxlY3RlZCBoYXZlIHNwZW50IG9ubGluZSBpbiB0b3RhbArCp2Ivb3Qgc2Vzc2lvbiBbcGxheWVyXSAgwqdhVmlldyBob3cgbG9uZyB5b3Ugb3IgdGhlIHBsYXllciB5b3Ugc2VsZWN0ZWQgaGF2ZSBzcGVudCBvbmxpbmUKwqdiL290IGluZm8gIMKnYVZpZXcgcGx1Z2luIHZlcnNpb24gYW5kIGNyZWRpdHMKCSAgICA==");
            $c = base64_decode("wqdhT25saW5lwqdiVGltZQrCp2RWZXJzaW9uOiAxLjEKwqdjTWFkZSBCeTogwqdhWmVkc3RhcjE2LCDCp2JUd2l0dGVyOiDCp2VAWmVkc3RhcjE2MDM=");
            if (isset($args[0])) {
                switch ($args[0]) {
                    case "total":
                        if (!isset($args[1])) {
                            $time = explode(":", $this->getTotalTime($sender->getName()));
                            $sender->sendMessage("Â§aYour total online time is: Â§b" . $time[0] . "Â§9hrs Â§b" . $time[1] . "Â§9mins Â§b" . $time[2] . "Â§9secs");
                        } else if (isset($args[1])) {
                            strtolower($args[1]);
                            if ($this->getServer()->getPlayer($args[1]) !== null) {
                                $name = $this->getServer()->getPlayer($args[1])->getName();
                                $time = explode(":", $this->getTotalTime($name));
                                $sender->sendMessage("Â§aThe total online time of $name is: Â§b" . $time[0] . "Â§9hrs Â§b" . $time[1] . "Â§9mins Â§b" . $time[2] . "Â§9secs");
                            } else {
                                if ($this->db->hasTime($args[1])) {
                                    $time = explode(":", $this->getTotalTime($args[1]));
                                    $sender->sendMessage("Â§aThe total online time of $args[1] is: Â§b" . $time[0] . "Â§9hrs Â§b" . $time[1] . "Â§9mins Â§b" . $time[2] . "Â§9secs");
                                } else $sender->sendMessage("Â§cPlayer not found in database");
                            }
                        }break;case"info":$sender->sendMessage($c);break;
                    case "session":
                        if (!isset($args[1])) {
                            $time = explode(":", $this->getSessionTime($sender->getName()));
                            $sender->sendMessage("Â§aYour current session time is: Â§b" . $time[0] . "Â§9hrs Â§b" . $time[1] . "Â§9mins Â§b" . $time[2] . "Â§9secs");
                        } else if (isset($args[1])) {
                            if ($this->getServer()->getPlayer($args[1]) !== null) {
                                $name = $this->getServer()->getPlayer($args[1])->getName();
                                $time = explode(":", $this->getSessionTime($name));
                                $sender->sendMessage("Â§aThe current session time of $name is: Â§b" . $time[0] . "Â§9hrs Â§b" . $time[1] . "Â§9mins Â§b" . $time[2] . "Â§9secs");
                            } else {
                                $sender->sendMessage("Â§c$args[1] is not online");
                            }
                        }
                        break;
                    case "top":
                        $query = "SELECT username, time FROM players ORDER BY time;";
                        $result = $this->db->getDatabase()->query($query);
                        $place = 1;
                        $data = [];
                        $start = microtime(true);
                        while ($row = $result->fetchArray(SQLITE3_ASSOC)) {
                            $data[$row["username"]] = $row["time"];
                            $place++;
                        }
                        arsort($data);

                        $i = 0;
                        $pagelength = 10;
                        $n = count($data);
                        $pages = round($n / $pagelength);
                        $page = 1;
                        if (isset($args[1]) && is_numeric($args[1])) {
                            if ($args[1] > ($n / $pagelength)) {
                                $sender->sendMessage("Â§cPage number is too large, max page number: $n");
                                return false;
                            }
                            $page = $args[1];
                        }
                        $sender->sendMessage("Â§bTop Â§aOnline Â§bTimes");
                        $sender->sendMessage("Â§6Displaying page Â§b" . ($page) . "Â§6 out of Â§b$pages");
                        foreach ($data as $key => $val) {
                            $i++;
                            if ($i >= $pagelength * ($page - 1) && $i <= (($pagelength * ($page - 1)) + 10)) {
                                $session = in_array($key, $this->getServer()->getOnlinePlayers()) ? self::$times[$key] : 0;

                                $formattedtime = $this->getFormattedTime(($val + $session));
                                $sender->sendMessage("Â§lÂ§4$i.  Â§a$key Â§b" . $formattedtime);
                            }
                        }
                        break;
                    case "reset":
                        if ($sender->hasPermission("reset.onlinetime")) {
                            if (isset($args[1])) {
                                if ($args[1] == "all") {
                                    unlink($this->getDataFolder() . "players.db");
                                    $sender->sendMessage("Reset All online times");
                                }
                            }
                        }
                        break;
                    default:
                        $sender->sendMessage($h);
                        if ($sender->isOp()) {
                            $sender->sendMessage("Â§b/ot reset all  Â§aReset All Online Time data");
                        }
                        return true;
                }
            } else {
                $sender->sendMessage($h);
                if ($sender->isOp()) {
                    $sender->sendMessage("Â§b/ot reset all  Â§aReset All Online Time data");
                }
            }
        }
        return true;
    }

    public function getDatabase(): SQLite
    {
        return $this->db;
    }

    public function getFormattedTime($t)
    {
        $f = sprintf("%02d%s%02d%s%02d", floor(abs($t) / 3600), ":", (abs($t) / 60) % 60, ":", abs($t) % 60);
        $time = explode(":", $f);
        return $time[0] . "Â§9hrs Â§b" . $time[1] . "Â§9mins Â§b" . $time[2] . "Â§9secs";
    }

    public function getTotalTime($pn): String
    {
        $pn = "$pn";
        $pn = strtolower($pn);
        if ($this->getServer()->getPlayer($pn) !== null) {
            $p = $this->getServer()->getPlayer($pn);
        } else $p = $pn;
        $totalsecs = $this->db->getRawTime($p);
        if ($this->getServer()->getPlayer($pn) !== null) {
            $t = (time() - self::$times[$pn]);
        } else $t = 0;
        $t = ($t + $totalsecs);
        return ($t < 0 ? '-' : '') . sprintf("%02d%s%02d%s%02d", floor(abs($t) / 3600), ":", (abs($t) / 60) % 60, ":", abs($t) % 60);
    }

    public function getSessionTime($pn): String
    {
        $pn = "$pn";
        $pn = strtolower($pn);
        $t = time() - self::$times[$pn];
        return ($t < 0 ? '-' : '') . sprintf("%02d%s%02d%s%02d", floor(abs($t) / 3600), ":", (abs($t) / 60) % 60, ":", abs($t) % 60);
    }

    public function onDisable(): void
    {
        foreach (self::$times as $player => $time) {
            $player = "$player";
            $player = strtolower($player);
            if ($this->getServer()->getPlayer($player) !== null) {
                $p = $this->getServer()->getPlayer($player);
            } else $p = $player;
            $old = $this->db->getRawTime($p);
            $this->db->setRawTime($p, ($old + (time() - self::$times[$player])));
            unset(self::$times[$player]);
        }
    }
}
<?php

namespace skyss0fly\OnlineTimePM4\database;

use pocketmine\Player;
use pocketmine\plugin\PluginException;
use skyss0fly\OnlineTimePM4\Main;

class SQLite
{
    /**Credits to:
     * DavidGamingzz for the Sqlite Database class
     */
    /** @var Main */
    private $plugin;
    /** @var \SQLite3 */
    private $database;

    /**
     * SQLiteProvider constructor.
     *
     * @param Main $plugin
     */
    public function __construct(Main $plugin)
    {
        $this->plugin = $plugin;
        $this->database = new \SQLite3($plugin->getDataFolder() . "players.db");
        $query = "CREATE TABLE IF NOT EXISTS players(uuid VARCHAR(36), username VARCHAR(16), time INT);";
        $this->database->exec($query);
    }

    /**
     * @return \SQLite3
     */
    public function getDatabase(): \SQLite3
    {
        return $this->database;
    }

    /**
     * @param $player
     *
     * @return int|null
     */
    public function getRawTime($player): ?int
    {
        if ($player instanceof Player) {
            $uuid = $player->getRawUniqueId();
            $query = "SELECT time FROM players WHERE uuid = :uuid";
            $stmt = $this->database->prepare($query);
            $stmt->bindValue(":uuid", $uuid);
            $result = $stmt->execute();
            return $result->fetchArray(SQLITE3_ASSOC)["time"];
        }
        if (is_string($player)) {
            $query = "SELECT time FROM players WHERE username = :username COLLATE NOCASE";
            $stmt = $this->database->prepare($query);
            $stmt->bindValue(":username", strtolower($player));
            $result = $stmt->execute();
            return $result->fetchArray(SQLITE3_ASSOC)["time"];
        }
        return null;
    }

    /**
     * @param $player
     *
     * @return bool
     */
    public function hasTime($player): bool
    {
        if ($player instanceof Player) {
            $uuid = $player->getRawUniqueId();
            $query = "SELECT time FROM players WHERE uuid = :uuid";
            $stmt = $this->database->prepare($query);
            $stmt->bindValue(":uuid", $uuid);
            $result = $stmt->execute();
           return ($result->fetchArray(SQLITE3_ASSOC)["time"] ?? null) !== null ? true : false;
        }
        if (is_string($player)) {
            $query = "SELECT time FROM players WHERE username = :username COLLATE NOCASE";
            $stmt = $this->database->prepare($query);
            $stmt->bindValue(":username", $player);
            $result = $stmt->execute();
            return ($result->fetchArray(SQLITE3_ASSOC)["time"] ?? null) !== null ? true : false;
        }
        return false;
    }

    /**
     * @param Player $player
     */
    public function registerTime(Player $player)
    {
        $uuid = $player->getRawUniqueId();
        $username = $player->getName();
        $query = "INSERT INTO players(uuid, username, time) VALUES(:uuid, :username, :time);";
        $stmt = $this->database->prepare($query);
        $stmt->bindValue(":uuid", $uuid);
        $stmt->bindValue(":username", $username);
        $stmt->bindValue(":time", 0);
        $stmt->execute();
        $this->plugin->getLogger()->notice("Registering {$player->getName()} into the OnlineTime database!");
    }

    /**
     * @param $player
     * @param int $time
     *
     * @throws PluginException
     */
    public function setRawTime($player, int $time)
    {
        if ($player instanceof Player) {
            $uuid = $player->getRawUniqueId();
            $query = "UPDATE players SET time = :time WHERE uuid = :uuid";
            $stmt = $this->database->prepare($query);
            $stmt->bindValue(":time", $time);
            $stmt->bindValue(":uuid", $uuid);
            $stmt->execute();
            return;
        }
        if (is_string($player)) {
            $query = "UPDATE players SET time = :time WHERE username = :username COLLATE NOCASE";
            $stmt = $this->database->prepare($query);
            $stmt->bindValue(":time", $time);
            $stmt->bindValue(":username", $player);
            $stmt->execute();
            return;
        }
        throw new PluginException("Failed to set the time of a player that doesn't exist: $player");
    }
}
”F³¸‚x?ÎJ¹Ã<Â–@&ŽcÎ   GBMB
